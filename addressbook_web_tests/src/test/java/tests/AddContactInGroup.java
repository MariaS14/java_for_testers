/*package tests; Generated by Selenium IDE

import model.ContactData;
import model.GroupData;
import org.junit.After;
import org.junit.Before;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.*;
import tests.TestBase;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Random;

import static org.junit.Assert.*;

public class AddContactInGroup extends TestBase {

*/


        /* @Test
    public void AddContactInGroup() {

        if (app.hbm().getContactCount() == 0) {
            app.hbm().createContact(new ContactData("", "contact name", "contact lastname", "contact phone", ""));
        }// проверяем есть ли у нас контакт, если нет создаем.

        var oldContacts = app.hbm().getContactList();//получаем список старых контактов
        var rnd = new Random();
        var index = rnd.nextInt(oldContacts.size());// Генерируем случайный индекс для выбора контакта из списка.
        var testData = new ContactData();
        // Получаем новый список контактов из базы данных.
        var newContacts = app.hbm().getContactList();
        var group = app.hbm().getGroupList().get(0);
        var oldRelated = app.hbm().getContactsInGroup(group);
        app.contacts().addContactInGroup(group);

        //app.contacts().createContact(contact,group);
        var expectedList = new ArrayList<>(oldContacts);
        expectedList.set(index, testData.withId(oldContacts.get(index).id()));
        //expectedList.set(index, testData.withId(newContacts.get(newContacts.size()-1).id()).withFirstName(firstname()).withLastName(contact.lastname()).withPhone(contact.phone()));
        Comparator<ContactData> compareById = (o1, o2) -> {
            return Integer.compare(Integer.parseInt(o1.id()), Integer.parseInt(o2.id()));
        };
        newContacts.sort(compareById);
        expectedList.sort(compareById);
        Assertions.assertEquals(newContacts,expectedList);
    }

        // Проверяем, есть ли группы в базе данных. Если нет, создаем новую группу.
        if (app.hbm().getGroupCount() == 0) {
            app.hbm().createGroup(new GroupData("", "group name", "group header", "group footer"));
        }
        // Создаем новый контакт и связываем его с выбранной группой.
        app.contacts().createContact(contact, group);

        // Получаем обновленный список контактов, связанных с выбранной группой.
        var newRelated = app.hbm().getContactsInGroup(group);

        // Проверяем, что после создания нового контакта в группе количество связанных контактов увеличилось на 1.
        Assertions.assertEquals(oldRelated.size() + 1, newRelated.size());
    }*/

        //app.driver.get("http://localhost/addressbook/");
      //app.driver.manage().window().setSize(new Dimension(1184, 784));
      //app.driver.findElement(By.name("user")).sendKeys("admin");
      //app.driver.findElement(By.name("pass")).sendKeys("secret");
        /*app.contacts().addContactInGroup(oldContacts.get(index), testData);
      app.driver.findElement(By.cssSelector("input:nth-child(7)")).click();
      app.driver.findElement(By.id("1543")).click();
      app.driver.findElement(By.name("to_group")).click();
        {
            WebElement dropdown = app.driver.findElement(By.name("to_group"));
            dropdown.findElement(By.xpath("//option[. = 'wefwe']")).click();
        }
      app.driver.findElement(By.name("add")).click();
        app.driver.findElement(By.linkText("group page \"wefwe\"")).click();
    }
}
*/